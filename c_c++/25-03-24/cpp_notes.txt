				############## 
  				   CPP NOTES
				##############

Datatypes: 
	1. char		- (8bit)
	2. int 		- (32bit integer)l
	3. float	- (32 bit with 7 digit precision) -> l
	4. double 	- (64 bit with 14 digit precision) -> lf

short, long, unsigned, long long -> qualifiers used along with int data type

eg: long long int q

long long 	-> qualifier long bits depends on the machine in general machines its 64 bit
int 		-> datatype
q 		-> identifier

*short -> %hd(format specifier)


#### 24-03-2024 ####

Function Pointer

Normal pointer -> used to access values;
function pointer -> accesses the block of code which is repeating

if 2 or more functions have almost similar code, then we use function pointer which can be used to pass out input and functions to a common code, which will output our desired value;

$$ Function pointer is mainly used to support function call-back;


Modularization -> Dividing the implementation of a large software into smaller sets of related functions known as modules is called modularization. 
		  A module can publish a subset of its functions so that they can be called from external modules. 

Modularization can enable muliple programmers to simultaneously and independently implement, test and maintain different parts of a software provided
it is performed according to following rules:
	1. Functions whose internal implementations depend upon each other should be defined within the same module.
	2. A module should only share the immutable information required to call its published function with external modules.

Data Abstraction: It is a modulatization methodology (systamatic style) in which the data processed by a program is divided into smaller units known as objects so that each object control its own state(data) and supports its own behaviour(code).

A class defines a set of members for a particular type of object and these members include fields(variables) whose values indicate the state of that object and methods(functions) whose implementation describe the behaviour of that object; It provides support for following mechanisms
	1. Actiavation - Each object refers to a block of memory known as the instance of its class and this block contains values of the fields defined by that class initialized by 		  		 calling a special method known as the constructor of that class.

	2. Binding - Every instance has unique identity and when a method defined by a class is called on its object the identity of the instance it refers to is passed to the 			     implementation of that method.

